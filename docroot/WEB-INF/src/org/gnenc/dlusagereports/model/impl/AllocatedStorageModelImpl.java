/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.gnenc.dlusagereports.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.gnenc.dlusagereports.model.AllocatedStorage;
import org.gnenc.dlusagereports.model.AllocatedStorageModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;

/**
 * The base model implementation for the AllocatedStorage service. Represents a row in the &quot;DLUsage_AllocatedStorage&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.gnenc.dlusagereports.model.AllocatedStorageModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AllocatedStorageImpl}.
 * </p>
 *
 * @author Drew A. Blessing
 * @see AllocatedStorageImpl
 * @see org.gnenc.dlusagereports.model.AllocatedStorage
 * @see org.gnenc.dlusagereports.model.AllocatedStorageModel
 * @generated
 */
public class AllocatedStorageModelImpl extends BaseModelImpl<AllocatedStorage>
	implements AllocatedStorageModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a AllocatedStorage model instance should use the {@link org.gnenc.dlusagereports.model.AllocatedStorage} interface instead.
	 */
	public static final String TABLE_NAME = "DLUsage_AllocatedStorage";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "totalBytes", Types.BIGINT },
			{ "ModifiedUserId", Types.BIGINT },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table DLUsage_AllocatedStorage (id_ LONG not null primary key,totalBytes LONG,ModifiedUserId LONG,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table DLUsage_AllocatedStorage";
	public static final String ORDER_BY_JPQL = " ORDER BY allocatedStorage.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY DLUsage_AllocatedStorage.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.gnenc.dlusagereports.model.AllocatedStorage"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.gnenc.dlusagereports.model.AllocatedStorage"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.gnenc.dlusagereports.model.AllocatedStorage"));

	public AllocatedStorageModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return AllocatedStorage.class;
	}

	public String getModelClassName() {
		return AllocatedStorage.class.getName();
	}

	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_id = id;
	}

	public long getTotalBytes() {
		return _totalBytes;
	}

	public void setTotalBytes(long totalBytes) {
		_totalBytes = totalBytes;
	}

	public long getModifiedUserId() {
		return _ModifiedUserId;
	}

	public void setModifiedUserId(long ModifiedUserId) {
		_ModifiedUserId = ModifiedUserId;
	}

	public String getModifiedUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getModifiedUserId(), "uuid",
			_ModifiedUserUuid);
	}

	public void setModifiedUserUuid(String ModifiedUserUuid) {
		_ModifiedUserUuid = ModifiedUserUuid;
	}

	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public AllocatedStorage toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (AllocatedStorage)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					AllocatedStorage.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		AllocatedStorageImpl allocatedStorageImpl = new AllocatedStorageImpl();

		allocatedStorageImpl.setId(getId());
		allocatedStorageImpl.setTotalBytes(getTotalBytes());
		allocatedStorageImpl.setModifiedUserId(getModifiedUserId());
		allocatedStorageImpl.setModifiedDate(getModifiedDate());

		allocatedStorageImpl.resetOriginalValues();

		return allocatedStorageImpl;
	}

	public int compareTo(AllocatedStorage allocatedStorage) {
		int value = 0;

		if (getId() < allocatedStorage.getId()) {
			value = -1;
		}
		else if (getId() > allocatedStorage.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		AllocatedStorage allocatedStorage = null;

		try {
			allocatedStorage = (AllocatedStorage)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = allocatedStorage.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<AllocatedStorage> toCacheModel() {
		AllocatedStorageCacheModel allocatedStorageCacheModel = new AllocatedStorageCacheModel();

		allocatedStorageCacheModel.id = getId();

		allocatedStorageCacheModel.totalBytes = getTotalBytes();

		allocatedStorageCacheModel.ModifiedUserId = getModifiedUserId();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			allocatedStorageCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			allocatedStorageCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return allocatedStorageCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", totalBytes=");
		sb.append(getTotalBytes());
		sb.append(", ModifiedUserId=");
		sb.append(getModifiedUserId());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("org.gnenc.dlusagereports.model.AllocatedStorage");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalBytes</column-name><column-value><![CDATA[");
		sb.append(getTotalBytes());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ModifiedUserId</column-name><column-value><![CDATA[");
		sb.append(getModifiedUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = AllocatedStorage.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			AllocatedStorage.class
		};
	private long _id;
	private long _totalBytes;
	private long _ModifiedUserId;
	private String _ModifiedUserUuid;
	private Date _modifiedDate;
	private transient ExpandoBridge _expandoBridge;
	private AllocatedStorage _escapedModelProxy;
}